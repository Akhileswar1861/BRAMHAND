{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akhil\\\\Downloads\\\\Bramhand_Tailwind_Ready\\\\src\\\\pages\\\\Vishnu.jsx\",\n  _s = $RefreshSig$();\n// 📁 BRAMHAND/frontend/src/pages/Vishnu.jsx\nimport React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Vishnu() {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const uploadedData = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.data) || [];\n  const [cleansedData, setCleansedData] = useState([]);\n  const purifyData = () => {\n    if (!uploadedData.length) return;\n\n    // Remove rows with all fields empty or missing values\n    const noEmptyRows = uploadedData.filter(row => {\n      return Object.values(row).some(val => val !== '' && val !== null && val !== undefined);\n    });\n\n    // Standardize column names\n    const standardized = noEmptyRows.map(row => {\n      const newRow = {};\n      Object.keys(row).forEach(key => {\n        const newKey = key.toLowerCase().replace(/\\s+/g, '_');\n        newRow[newKey] = row[key];\n      });\n      return newRow;\n    });\n\n    // Remove duplicate rows\n    const uniqueRows = Array.from(new Set(standardized.map(JSON.stringify))).map(JSON.parse);\n    setCleansedData(uniqueRows);\n  };\n  const downloadCleansedFile = () => {\n    const csvContent = [Object.keys(cleansedData[0]).join(','), ...cleansedData.map(row => Object.values(row).join(','))].join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, 'purified_karma.csv');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-b from-[#0f0c29] via-[#302b63] to-[#0f0c29] flex flex-col items-center justify-center p-6 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-5xl font-bold mb-6 animate-pulse\",\n      children: \"\\uD83D\\uDD31 Vishnu's Chamber of Purification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: purifyData,\n      className: \"bg-green-400 hover:bg-green-500 text-black font-bold py-3 px-8 rounded-full transition transform hover:scale-105 mb-8\",\n      children: \"\\uD83E\\uDDF9 Start Purification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), cleansedData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4\",\n        children: \"\\u2728 Purified Karma Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"min-w-full table-auto text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(cleansedData[0]).map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border px-4 py-2\",\n                children: col\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: cleansedData.slice(0, 5).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(row).map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border px-4 py-2\",\n                children: cell !== undefined ? cell : '-'\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 23\n              }, this))\n            }, rowIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadCleansedFile,\n        className: \"mt-6 bg-yellow-400 hover:bg-yellow-500 text-black font-bold py-3 px-8 rounded-full transition transform hover:scale-105\",\n        children: \"\\uD83D\\uDCE5 Download Purified CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Vishnu, \"VfP1ao5iuY6GOBmhi9x2Etat2Ug=\", false, function () {\n  return [useLocation];\n});\n_c = Vishnu;\nvar _c;\n$RefreshReg$(_c, \"Vishnu\");","map":{"version":3,"names":["React","useState","useLocation","saveAs","jsxDEV","_jsxDEV","Vishnu","_s","_location$state","location","uploadedData","state","data","cleansedData","setCleansedData","purifyData","length","noEmptyRows","filter","row","Object","values","some","val","undefined","standardized","map","newRow","keys","forEach","key","newKey","toLowerCase","replace","uniqueRows","Array","from","Set","JSON","stringify","parse","downloadCleansedFile","csvContent","join","blob","Blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","col","index","slice","rowIndex","cell","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/akhil/Downloads/Bramhand_Tailwind_Ready/src/pages/Vishnu.jsx"],"sourcesContent":["// 📁 BRAMHAND/frontend/src/pages/Vishnu.jsx\r\nimport React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default function Vishnu() {\r\n  const location = useLocation();\r\n  const uploadedData = location.state?.data || [];\r\n\r\n  const [cleansedData, setCleansedData] = useState([]);\r\n\r\n  const purifyData = () => {\r\n    if (!uploadedData.length) return;\r\n\r\n    // Remove rows with all fields empty or missing values\r\n    const noEmptyRows = uploadedData.filter(row => {\r\n      return Object.values(row).some(val => val !== '' && val !== null && val !== undefined);\r\n    });\r\n\r\n    // Standardize column names\r\n    const standardized = noEmptyRows.map(row => {\r\n      const newRow = {};\r\n      Object.keys(row).forEach(key => {\r\n        const newKey = key.toLowerCase().replace(/\\s+/g, '_');\r\n        newRow[newKey] = row[key];\r\n      });\r\n      return newRow;\r\n    });\r\n\r\n    // Remove duplicate rows\r\n    const uniqueRows = Array.from(new Set(standardized.map(JSON.stringify))).map(JSON.parse);\r\n\r\n    setCleansedData(uniqueRows);\r\n  };\r\n\r\n  const downloadCleansedFile = () => {\r\n    const csvContent = [\r\n      Object.keys(cleansedData[0]).join(','),\r\n      ...cleansedData.map(row => Object.values(row).join(','))\r\n    ].join('\\n');\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    saveAs(blob, 'purified_karma.csv');\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-[#0f0c29] via-[#302b63] to-[#0f0c29] flex flex-col items-center justify-center p-6 text-white\">\r\n      <h1 className=\"text-5xl font-bold mb-6 animate-pulse\">🔱 Vishnu's Chamber of Purification</h1>\r\n\r\n      <button\r\n        onClick={purifyData}\r\n        className=\"bg-green-400 hover:bg-green-500 text-black font-bold py-3 px-8 rounded-full transition transform hover:scale-105 mb-8\"\r\n      >\r\n        🧹 Start Purification\r\n      </button>\r\n\r\n      {cleansedData.length > 0 && (\r\n        <div className=\"w-full max-w-5xl\">\r\n          <h2 className=\"text-2xl font-semibold mb-4\">✨ Purified Karma Data:</h2>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full table-auto text-sm text-gray-300\">\r\n              <thead>\r\n                <tr>\r\n                  {Object.keys(cleansedData[0]).map((col, index) => (\r\n                    <th key={index} className=\"border px-4 py-2\">{col}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {cleansedData.slice(0, 5).map((row, rowIndex) => (\r\n                  <tr key={rowIndex}>\r\n                    {Object.values(row).map((cell, colIndex) => (\r\n                      <td key={colIndex} className=\"border px-4 py-2\">\r\n                        {cell !== undefined ? cell : '-'}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <button\r\n            onClick={downloadCleansedFile}\r\n            className=\"mt-6 bg-yellow-400 hover:bg-yellow-500 text-black font-bold py-3 px-8 rounded-full transition transform hover:scale-105\"\r\n          >\r\n            📥 Download Purified CSV\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}